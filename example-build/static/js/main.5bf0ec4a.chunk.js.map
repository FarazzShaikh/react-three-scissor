{"version":3,"sources":["../src/store.tsx","../src/ScissorCanvas.tsx","../src/hooks/useCombinedRefs.ts","../src/ScissorWindow.tsx","../src/ScissorScene.tsx","utils/Helpers.jsx","Models.tsx","../src/hooks/useScissorFrame.ts","../src/hooks/useScissorInit.ts","App.tsx","useMesh.tsx","index.tsx"],"names":["create","set","get","windows","addWindow","window","id","uuid","THREE","generateUUID","produce","state","element","removeWindow","addScene","scene","camera","rect","getBoundingClientRect","width","height","hasInit","removeScene","sethasInit","getIds","Object","keys","frameSubscribers","addSubscriber","cb","length","forEach","k","removeSubscriber","initSubscribers","addInitSubscriber","removeInitSubscriber","ScissorRenderer","store","s","useFrame","gl","key","setScissorTest","clear","add","left","right","top","bottom","domElement","clientHeight","clientWidth","positiveYUpBottom","setScissor","setViewport","aspect","updateProjectionMatrix","render","ScissorCanvas","forwardRef","props","ref","style","position","display","zIndex","children","useCombinedRefs","refs","targetRef","React","useRef","useEffect","current","ScissorWindow","rest","localRef","combinedRef","_uuid","ScissorScene","Helpers","args","Model","meshes","orbit","useScissorFrame","update","useScissorInit","genericCamera","lookAt","OrbitControls","bBox","setFromObject","size","getSize","dist","y","Math","tan","fov","PI","pos","setScalar","multiplyScalar","map","m","i","scale","degToRad","Center","castShadow","geometry","vertexColors","intensity","receiveShadow","color","useGLTF","preload","softShadows","container","hidden","transition","staggerChildren","show","item","Cells","limit","nodes","useMemo","values","filter","o","isMesh","splice","useMesh","antialias","shadows","fallback","AnimatePresence","motion","div","className","variants","initial","animate","exit","parent","name","process","useState","nMesh","setNMeshes","nMeshFinal","setNMeshesFinal","autoHide","autoHideTimeout","autoHideDuration","href","min","max","onAfterChange","v","onChange","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bf0ec4a.chunk.js","sourcesContent":["import create from \"zustand\";\r\nimport produce from \"immer\";\r\nimport * as THREE from \"three\";\r\nimport { iScissorWindow, tScissorCallback } from \"./ScissorTypes\";\r\n\r\ninterface iScissorRootState {\r\n  windows: {\r\n    [key: string]: iScissorWindow;\r\n  };\r\n  frameSubscribers: {\r\n    [key: string]: tScissorCallback;\r\n  };\r\n  initSubscribers: {\r\n    [key: string]: tScissorCallback;\r\n  };\r\n  addWindow: (window: HTMLElement, id?: string | undefined) => string;\r\n  removeWindow: (id: string) => any;\r\n  addScene: (\r\n    scene: THREE.Scene,\r\n    id: string,\r\n    camera?: THREE.Camera | undefined\r\n  ) => any;\r\n  removeScene: (id: string) => any;\r\n  sethasInit: (hasInit: boolean, id: string) => any;\r\n  getIds: () => string[];\r\n  addSubscriber: (cb: tScissorCallback, uuid: string[]) => any;\r\n  removeSubscriber: (uuid: string[]) => any;\r\n  addInitSubscriber: (cb: tScissorCallback, uuid: string[]) => any;\r\n  removeInitSubscriber: (uuid: string[]) => any;\r\n}\r\n\r\nexport default create<iScissorRootState>((set: any, get: any) => ({\r\n  windows: {},\r\n  addWindow: (window: HTMLElement, id?: string) => {\r\n    const uuid = id ?? THREE.MathUtils.generateUUID();\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        state.windows[uuid] = {\r\n          element: window,\r\n        };\r\n      })\r\n    );\r\n\r\n    return uuid;\r\n  },\r\n  removeWindow: (id: string) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        delete state.windows[id];\r\n      })\r\n    ),\r\n\r\n  addScene: (scene: THREE.Scene, id: string, camera?: THREE.Camera) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        if (state.windows[id]) {\r\n          const elem = state.windows[id].element;\r\n          const rect = elem.getBoundingClientRect();\r\n          state.windows[id].scene = scene;\r\n          state.windows[id].camera =\r\n            camera ??\r\n            new THREE.PerspectiveCamera(\r\n              75,\r\n              rect.width / rect.height,\r\n              0.1,\r\n              1000\r\n            );\r\n          state.windows[id].hasInit = false;\r\n        }\r\n      })\r\n    ),\r\n\r\n  removeScene: (id: string) => get().removeWindow(id),\r\n\r\n  sethasInit: (hasInit: boolean, id: string) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        state.windows[id].hasInit = hasInit;\r\n      })\r\n    ),\r\n\r\n  getIds: () => Object.keys((get() as iScissorRootState).windows),\r\n\r\n  frameSubscribers: {},\r\n  addSubscriber: (cb: tScissorCallback, uuid: string[]) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        if (uuid.length > 0) {\r\n          uuid.forEach((id) => (state.frameSubscribers[id] = cb));\r\n        } else {\r\n          Object.keys(state.windows).forEach(\r\n            (k) => (state.frameSubscribers[k] = cb)\r\n          );\r\n        }\r\n      })\r\n    ),\r\n  removeSubscriber: (uuid: string[]) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        if (uuid.length > 0) {\r\n          uuid.forEach((id) => delete state.frameSubscribers[id]);\r\n        } else {\r\n          state.frameSubscribers = {};\r\n        }\r\n      })\r\n    ),\r\n\r\n  initSubscribers: {},\r\n  addInitSubscriber: (cb: tScissorCallback, uuid: string[]) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        if (uuid.length > 0) {\r\n          uuid.forEach((id) => (state.initSubscribers[id] = cb));\r\n        } else {\r\n          Object.keys(state.windows).forEach(\r\n            (k) => (state.initSubscribers[k] = cb)\r\n          );\r\n        }\r\n      })\r\n    ),\r\n  removeInitSubscriber: (uuid: string[]) =>\r\n    set(\r\n      produce((state: iScissorRootState) => {\r\n        if (uuid.length > 0) {\r\n          uuid.forEach((id) => delete state.initSubscribers[id]);\r\n        } else {\r\n          state.initSubscribers = {};\r\n        }\r\n      })\r\n    ),\r\n}));\r\n","import { Canvas, Props, useFrame } from \"@react-three/fiber\";\r\nimport React, { forwardRef } from \"react\";\r\nimport store from \"./store\";\r\n\r\nimport { iScissorWindow, tScissorCallback } from \"./ScissorTypes\";\r\n\r\nfunction ScissorRenderer() {\r\n  const windows = store((s) => s.windows) as { [key: string]: iScissorWindow };\r\n  const frameSubscribers = store((s) => s.frameSubscribers) as {\r\n    [key: string]: tScissorCallback;\r\n  };\r\n  const initSubscribers = store((s) => s.initSubscribers) as {\r\n    [key: string]: tScissorCallback;\r\n  };\r\n  const sethasInit = store((s) => s.sethasInit);\r\n\r\n  useFrame((state) => {\r\n    const { gl } = state;\r\n\r\n    gl.setScissorTest(false);\r\n    gl.clear(true, true);\r\n    gl.setScissorTest(true);\r\n\r\n    // const transform = `translateY(${window.scrollY}px)`;\r\n    // if (gl.domElement.parentElement)\r\n    //   gl.domElement.parentElement.style.transform = transform;\r\n\r\n    for (const key in windows) {\r\n      const { scene, element, camera, hasInit } = windows[key];\r\n\r\n      if (scene && camera) {\r\n        if (!hasInit) {\r\n          if (initSubscribers[key])\r\n            initSubscribers[key]({\r\n              scene,\r\n              camera,\r\n              element,\r\n            });\r\n          scene.add(camera);\r\n          sethasInit(true, key);\r\n        }\r\n\r\n        const rect = element.getBoundingClientRect();\r\n        const { left, right, top, bottom, width, height } = rect;\r\n\r\n        const isOffscreen =\r\n          bottom < 0 ||\r\n          top > gl.domElement.clientHeight ||\r\n          right < 0 ||\r\n          left > gl.domElement.clientWidth;\r\n\r\n        if (!isOffscreen) {\r\n          const positiveYUpBottom = gl.domElement.clientHeight - bottom;\r\n          gl.setScissor(left, positiveYUpBottom, width, height);\r\n          gl.setViewport(left, positiveYUpBottom, width, height);\r\n\r\n          // @ts-ignore\r\n          camera.aspect = rect.width / rect.height;\r\n          // @ts-ignore\r\n          camera.updateProjectionMatrix();\r\n\r\n          if (frameSubscribers[key])\r\n            frameSubscribers[key]({\r\n              scene,\r\n              camera,\r\n              element,\r\n            });\r\n\r\n          gl.render(scene, camera);\r\n        }\r\n      }\r\n    }\r\n  }, 1);\r\n\r\n  return <></>;\r\n}\r\n\r\nconst ScissorCanvas = forwardRef<\r\n  HTMLCanvasElement,\r\n  React.PropsWithChildren<Props>\r\n>((props, ref) => {\r\n  return (\r\n    <Canvas\r\n      ref={ref}\r\n      style={{\r\n        position: \"fixed\",\r\n        left: \"0\",\r\n        top: \"0\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"block\",\r\n        zIndex: -1,\r\n      }}\r\n      {...props}\r\n    >\r\n      <ScissorRenderer />\r\n      {props.children}\r\n    </Canvas>\r\n  );\r\n});\r\n\r\nexport default ScissorCanvas;\r\n","import React from \"react\";\r\n\r\nexport default function useCombinedRefs<T>(...refs: any[]) {\r\n  const targetRef = React.useRef<T>(null);\r\n\r\n  React.useEffect(() => {\r\n    refs.forEach((ref) => {\r\n      if (!ref) return;\r\n      ref.current = targetRef.current;\r\n    });\r\n  }, [refs]);\r\n\r\n  return targetRef;\r\n}\r\n","import React, { forwardRef, useEffect, useRef } from \"react\";\r\nimport store from \"./store\";\r\nimport useCombinedRefs from \"./hooks/useCombinedRefs\";\r\n\r\ninterface iScissorWindowProps {\r\n  uuid?: string;\r\n}\r\n\r\nconst ScissorWindow = forwardRef<\r\n  HTMLDivElement,\r\n  React.PropsWithChildren<iScissorWindowProps & React.HTMLProps<HTMLDivElement>>\r\n>(({ uuid, children, ...rest }, ref) => {\r\n  const addWindow = store((s) => s.addWindow);\r\n  const removeWindow = store((s) => s.removeWindow);\r\n  const localRef = useRef();\r\n  const combinedRef = useCombinedRefs<HTMLDivElement>(ref, localRef);\r\n\r\n  useEffect(() => {\r\n    if (localRef.current) {\r\n      const _uuid = addWindow(localRef.current, uuid);\r\n      return () => removeWindow(_uuid);\r\n    } else {\r\n      return;\r\n    }\r\n  }, [localRef]);\r\n\r\n  return (\r\n    <div {...rest} ref={combinedRef}>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ScissorWindow;\r\n","import React, { forwardRef, useEffect, useRef } from \"react\";\r\nimport store from \"./store\";\r\nimport useCombinedRefs from \"./hooks/useCombinedRefs\";\r\n\r\ninterface iScissorGroupProps {\r\n  uuid: string;\r\n}\r\n\r\nconst ScissorScene = forwardRef<\r\n  THREE.Scene,\r\n  React.PropsWithChildren<iScissorGroupProps>\r\n>(({ uuid, children, ...rest }, ref) => {\r\n  const addScene = store((s) => s.addScene);\r\n  const removeScene = store((s) => s.removeScene);\r\n  const localRef = useRef<THREE.Scene>();\r\n  const combinedRef = useCombinedRefs<THREE.Scene>(ref, localRef);\r\n\r\n  useEffect(() => {\r\n    if (localRef.current) {\r\n      addScene(localRef.current, uuid);\r\n      return () => removeScene(uuid);\r\n    } else {\r\n      return;\r\n    }\r\n  }, [localRef]);\r\n\r\n  return (\r\n    <scene {...rest} ref={combinedRef}>\r\n      {children}\r\n    </scene>\r\n  );\r\n});\r\n\r\nexport default ScissorScene;\r\n","export default function Helpers() {\r\n  return (\r\n    <group>\r\n      <axesHelper args={[10, 10]} />\r\n      <gridHelper />\r\n    </group>\r\n  )\r\n}\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport { useRef } from \"react\";\r\nimport { useGLTF, Center, Plane } from \"@react-three/drei\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { ScissorScene, useScissorFrame, useScissorInit } from \"../src\";\r\n\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport Helpers from \"./utils/Helpers\";\r\n\r\nexport default function Model({ meshes }: { meshes: THREE.Mesh[] }) {\r\n  const orbit = useRef<OrbitControls>();\r\n  useScissorFrame(() => {\r\n    if (orbit.current) {\r\n      orbit.current.update();\r\n    }\r\n  }, []);\r\n\r\n  useScissorInit(({ camera: genericCamera, element, scene }) => {\r\n    const camera = genericCamera as THREE.PerspectiveCamera;\r\n\r\n    camera.position.set(2, 2, 2);\r\n    camera.lookAt(0, 0, 0);\r\n    orbit.current = new OrbitControls(camera, element);\r\n\r\n    const bBox = new THREE.Box3().setFromObject(scene);\r\n    const size = new THREE.Vector3();\r\n    bBox.getSize(size);\r\n    const height = size.y;\r\n    const dist = height / (2 * Math.tan((camera.fov * Math.PI) / 360));\r\n    const pos = scene.position;\r\n\r\n    const fac = 1.5;\r\n    camera.position.setScalar(dist).multiplyScalar(fac);\r\n    camera.lookAt(pos);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {meshes.map((m, i) => {\r\n        return (\r\n          <ScissorScene uuid={`${i}`} key={i}>\r\n            <group scale={0.1} rotation-x={THREE.MathUtils.degToRad(90)}>\r\n              <Center>\r\n                <mesh castShadow geometry={m.geometry}>\r\n                  <meshBasicMaterial vertexColors />\r\n                </mesh>\r\n              </Center>\r\n            </group>\r\n\r\n            <ambientLight intensity={0.2} />\r\n            <directionalLight\r\n              castShadow\r\n              receiveShadow\r\n              position={[0, 10, 0]}\r\n              intensity={0.5}\r\n              shadow-mapSize-height={512}\r\n              shadow-mapSize-width={512}\r\n            />\r\n\r\n            <Plane\r\n              receiveShadow\r\n              rotation-x={THREE.MathUtils.degToRad(-90)}\r\n              scale={20}\r\n            >\r\n              <shadowMaterial color={\"#fef5ed\"} />\r\n            </Plane>\r\n\r\n            <Helpers />\r\n          </ScissorScene>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/models/mesh.glb\");\r\n","import { useEffect } from \"react\";\r\nimport store from \"../store\";\r\n\r\nimport { tScissorCallback } from \"../ScissorTypes\";\r\n\r\nexport default function useScissorFrame(cb: tScissorCallback, uuid: string[]) {\r\n  const windows = store((s) => s.windows);\r\n\r\n  const addSubscriber = store((s) => s.addSubscriber);\r\n  const removeSubscriber = store((s) => s.removeSubscriber);\r\n\r\n  useEffect(() => {\r\n    addSubscriber(cb, uuid);\r\n    return () => removeSubscriber(uuid);\r\n  }, [windows]);\r\n}\r\n","import { useEffect } from \"react\";\r\nimport store from \"../store\";\r\n\r\nimport { tScissorCallback } from \"../ScissorTypes\";\r\n\r\nexport default function useScissorInit(cb: tScissorCallback, uuid: string[]) {\r\n  const windows = store((s) => s.windows);\r\n  const addInitSubscriber = store((s) => s.addInitSubscriber);\r\n  const removeInitSubscriber = store((s) => s.removeInitSubscriber);\r\n\r\n  useEffect(() => {\r\n    addInitSubscriber(cb, uuid);\r\n    return () => removeInitSubscriber(uuid);\r\n  }, [windows]);\r\n}\r\n","import { Suspense, useState } from \"react\";\nimport { hot } from \"react-hot-loader\";\n\nimport { ScissorCanvas, ScissorWindow } from \"../src/index\";\nimport Model from \"./Models\";\nimport { softShadows } from \"@react-three/drei\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport useMesh from \"./useMesh\";\nimport GitHubButton from \"react-github-btn\";\n//@ts-ignore\nimport { Scrollbars } from \"react-custom-scrollbars\";\n//@ts-ignore\nimport { AnimatePresence, motion } from \"framer-motion/dist/es/index\";\n\nsoftShadows();\n\nconst container = {\n  hidden: {\n    scale: 0,\n    transition: {\n      staggerChildren: 10,\n    },\n  },\n  show: {\n    scale: 1,\n    transition: {\n      staggerChildren: 10,\n    },\n  },\n};\n\nconst item = {\n  hidden: { scale: 0 },\n  show: { scale: 1 },\n};\n\nfunction Cells({ limit }: { limit: number }) {\n  const meshes = useMesh({ limit });\n\n  return (\n    <>\n      <ScissorCanvas\n        gl={{\n          antialias: true,\n        }}\n        shadows\n      >\n        <Suspense fallback={null}>\n          <Model meshes={meshes} />\n        </Suspense>\n      </ScissorCanvas>\n\n      <AnimatePresence>\n        <motion.div\n          className=\"container\"\n          variants={container}\n          initial=\"hidden\"\n          animate=\"show\"\n          exit=\"hidden\"\n        >\n          {meshes.map((m, i) => (\n            <motion.div key={i} variants={item}>\n              <ScissorWindow className=\"cell\" uuid={`${i}`}>\n                <div className=\"ScissorWindow-container\">\n                  <p>{m?.parent?.name || `Model ${i + 1}`}</p>\n                </div>\n              </ScissorWindow>\n            </motion.div>\n          ))}\n        </motion.div>\n      </AnimatePresence>\n    </>\n  );\n}\n\nfunction App() {\n  const [nMesh, setNMeshes] = useState(1);\n  const [nMeshFinal, setNMeshesFinal] = useState(1);\n\n  return (\n    <Scrollbars\n      autoHide //\n      autoHideTimeout={1000}\n      autoHideDuration={200}\n    >\n      <p className=\"title-container\">\n        react-three-<div className=\"title\">Scissor</div>\n      </p>\n\n      <div className=\"github-btn \">\n        <GitHubButton\n          href=\"https://github.com/farazzshaikh/react-three-scissor\"\n          data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n          data-size=\"large\"\n          aria-label=\"Star farazzshaikh/react-three-scissor on GitHub\"\n        >\n          Star\n        </GitHubButton>\n      </div>\n\n      <div className=\"input\">\n        <span>\n          <Slider\n            min={1}\n            max={100}\n            onAfterChange={(v) => setNMeshesFinal(v)}\n            onChange={(v) => setNMeshes(v)}\n          />\n          <div>\n            {nMesh} mesh{nMesh > 1 ? \"s\" : \"\"}\n          </div>\n        </span>\n      </div>\n\n      <h3>Click + drag on each animal!</h3>\n      <Suspense fallback={null}>\n        <Cells limit={nMeshFinal} />\n      </Suspense>\n    </Scrollbars>\n  );\n}\n\nexport default process.env.NODE_ENV === \"development\" ? hot(module)(App) : App;\n","import { useGLTF } from \"@react-three/drei\";\r\nimport { useMemo } from \"react\";\r\n\r\nexport default function useMesh({ limit }: { limit: number }) {\r\n  // @ts-ignore\r\n  const { nodes } = useGLTF(\"/models/mesh.glb\");\r\n\r\n  const meshes: THREE.Mesh[] = useMemo(\r\n    () =>\r\n      Object.values(nodes)\r\n        .filter((o: any) => o.isMesh)\r\n        .splice(0, limit) as any,\r\n    [limit]\r\n  );\r\n\r\n  return meshes;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}